let table = base.getTable('Projects')
let query = await table.selectRecordsAsync()

let newRecordArray = []
let updateRecArray = []

await getProjects()

async function getProjects() {
    const username = 'EMAIL ON JIRA ACCOUNT';
    const apiToken = 'TOKEN';
    const base64Credentials = btoaCustom(`${username}:${apiToken}`);

    const response = await fetch("https://air-org.atlassian.net/rest/api/3/project", {
        method: 'GET',
        headers: {
            "Authorization": `Basic ${base64Credentials}`,
            "Accept": "application/json"
        }
    });

    if (!response.ok) {
        console.error("Failed to fetch projects:", response.statusText);
        return;
    }

    
    const payloadData = await response.json();
    console.log(payloadData);
    
    for (let projectData of payloadData) {
        let foundCheck = false;
        for (let rec of query.records) {
            if (rec.getCellValueAsString('Project ID') == projectData['id']) {
                foundCheck = true
                let updateRec = {
                    id: rec.id,
                    fields: {
                        "Project ID": projectData['id'],
                        "Project URL": projectData['self'],
                        //"Project Category": projectData['projectCategory']['name'],
                        "Key": projectData['key'],
                        "Name": projectData['name'],
                        "Project Type": projectData['projectTypeKey']
                    }
                }
                updateRecArray.push(updateRec)
                break;
            }
        }

        if (foundCheck == false) {
            let newRecord = {
                fields: {
                    "Project ID": projectData['id'],
                    "Project URL": projectData['self'],
                    //"Project Category": projectData['projectCategory']['name'],
                    "Key": projectData['key'],
                    "Name": projectData['name'],
                }
            }
            newRecordArray.push(newRecord)
        }
        
    }
    while (newRecordArray.length > 0) {
        await table.createRecordsAsync(newRecordArray.slice(0,50));
        newRecordArray = newRecordArray.slice(50)
    }
    while (updateRecArray.length > 0) {
        await table.updateRecordsAsync(updateRecArray.slice(0,50));
        updateRecArray = updateRecArray.slice(50)
    }
}

function btoaCustom(input) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    let str = '';
    let i = 0;
    
    while (i < input.length) {
        const byte1 = input.charCodeAt(i++);
        const byte2 = input.charCodeAt(i++);
        const byte3 = input.charCodeAt(i++);
        
        const enc1 = byte1 >> 2;
        const enc2 = ((byte1 & 3) << 4) | (byte2 >> 4);
        const enc3 = ((byte2 & 15) << 2) | (byte3 >> 6);
        const enc4 = byte3 & 63;

        str += chars.charAt(enc1) + chars.charAt(enc2) + (isNaN(byte2) ? '=' : chars.charAt(enc3)) + (isNaN(byte3) ? '=' : chars.charAt(enc4));
    }

    return str;
}
